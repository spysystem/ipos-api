<?php
/**
 * StockTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  iPosExchanger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * iPos integration for FileMaker 17 API
 *
 * OpenAPI description for the iPOS integration for FileMaker 17 API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace iPosExchanger\Model;

use \ArrayAccess;
use \iPosExchanger\ObjectSerializer;

/**
 * StockTransaction Class Doc Comment
 *
 * @category Class
 * @package  iPosExchanger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StockTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return StockTransactionModelFields
      */
    public static function GetModelFields(): StockTransactionModelFields
    {
        return new StockTransactionModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return StockTransactionModelAttributes
      */
    public static function GetModelAttributes(): StockTransactionModelAttributes
    {
        return new StockTransactionModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StockTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_vare' => 'string',
        'id_lokation' => 'string',
        'antal_lager' => 'string',
        'flytning' => 'string',
        'spy_api_done' => 'string',
        'time_stamp' => 'string',
        'tekst' => 'string',
        'id_tabel' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_vare' => null,
        'id_lokation' => null,
        'antal_lager' => null,
        'flytning' => null,
        'spy_api_done' => null,
        'time_stamp' => null,
        'tekst' => null,
        'id_tabel' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_vare' => false,
		'id_lokation' => false,
		'antal_lager' => false,
		'flytning' => false,
		'spy_api_done' => false,
		'time_stamp' => false,
		'tekst' => false,
		'id_tabel' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_vare' => 'id_vare',
        'id_lokation' => 'id_lokation',
        'antal_lager' => 'Antal_lager',
        'flytning' => 'flytning',
        'spy_api_done' => 'spy_api_done',
        'time_stamp' => 'TimeStamp',
        'tekst' => 'Tekst',
        'id_tabel' => 'ID_tabel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_vare' => 'setIdVare',
        'id_lokation' => 'setIdLokation',
        'antal_lager' => 'setAntalLager',
        'flytning' => 'setFlytning',
        'spy_api_done' => 'setSpyApiDone',
        'time_stamp' => 'setTimeStamp',
        'tekst' => 'setTekst',
        'id_tabel' => 'setIdTabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_vare' => 'getIdVare',
        'id_lokation' => 'getIdLokation',
        'antal_lager' => 'getAntalLager',
        'flytning' => 'getFlytning',
        'spy_api_done' => 'getSpyApiDone',
        'time_stamp' => 'getTimeStamp',
        'tekst' => 'getTekst',
        'id_tabel' => 'getIdTabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id_vare', $data ?? [], null);
        $this->setIfExists('id_lokation', $data ?? [], null);
        $this->setIfExists('antal_lager', $data ?? [], null);
        $this->setIfExists('flytning', $data ?? [], null);
        $this->setIfExists('spy_api_done', $data ?? [], null);
        $this->setIfExists('time_stamp', $data ?? [], null);
        $this->setIfExists('tekst', $data ?? [], null);
        $this->setIfExists('id_tabel', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id_vare
     *
     * @return string|null
     */
    public function getIdVare()
    {
        return $this->container['id_vare'];
    }

    /**
     * Sets id_vare
     *
     * @param string|null $id_vare id_vare
     *
     * @return self
     */
    public function setIdVare($id_vare)
    {

        if (is_null($id_vare)) {
            throw new \InvalidArgumentException('non-nullable id_vare cannot be null');
        }

        $this->container['id_vare'] = $id_vare;

        return $this;
    }

    /**
     * Gets id_lokation
     *
     * @return string|null
     */
    public function getIdLokation()
    {
        return $this->container['id_lokation'];
    }

    /**
     * Sets id_lokation
     *
     * @param string|null $id_lokation id_lokation
     *
     * @return self
     */
    public function setIdLokation($id_lokation)
    {

        if (is_null($id_lokation)) {
            throw new \InvalidArgumentException('non-nullable id_lokation cannot be null');
        }

        $this->container['id_lokation'] = $id_lokation;

        return $this;
    }

    /**
     * Gets antal_lager
     *
     * @return string|null
     */
    public function getAntalLager()
    {
        return $this->container['antal_lager'];
    }

    /**
     * Sets antal_lager
     *
     * @param string|null $antal_lager antal_lager
     *
     * @return self
     */
    public function setAntalLager($antal_lager)
    {

        if (is_null($antal_lager)) {
            throw new \InvalidArgumentException('non-nullable antal_lager cannot be null');
        }

        $this->container['antal_lager'] = $antal_lager;

        return $this;
    }

    /**
     * Gets flytning
     *
     * @return string|null
     */
    public function getFlytning()
    {
        return $this->container['flytning'];
    }

    /**
     * Sets flytning
     *
     * @param string|null $flytning flytning
     *
     * @return self
     */
    public function setFlytning($flytning)
    {

        if (is_null($flytning)) {
            throw new \InvalidArgumentException('non-nullable flytning cannot be null');
        }

        $this->container['flytning'] = $flytning;

        return $this;
    }

    /**
     * Gets spy_api_done
     *
     * @return string|null
     */
    public function getSpyApiDone()
    {
        return $this->container['spy_api_done'];
    }

    /**
     * Sets spy_api_done
     *
     * @param string|null $spy_api_done spy_api_done
     *
     * @return self
     */
    public function setSpyApiDone($spy_api_done)
    {

        if (is_null($spy_api_done)) {
            throw new \InvalidArgumentException('non-nullable spy_api_done cannot be null');
        }

        $this->container['spy_api_done'] = $spy_api_done;

        return $this;
    }

    /**
     * Gets time_stamp
     *
     * @return string|null
     */
    public function getTimeStamp()
    {
        return $this->container['time_stamp'];
    }

    /**
     * Sets time_stamp
     *
     * @param string|null $time_stamp time_stamp
     *
     * @return self
     */
    public function setTimeStamp($time_stamp)
    {

        if (is_null($time_stamp)) {
            throw new \InvalidArgumentException('non-nullable time_stamp cannot be null');
        }

        $this->container['time_stamp'] = $time_stamp;

        return $this;
    }

    /**
     * Gets tekst
     *
     * @return string|null
     */
    public function getTekst()
    {
        return $this->container['tekst'];
    }

    /**
     * Sets tekst
     *
     * @param string|null $tekst tekst
     *
     * @return self
     */
    public function setTekst($tekst)
    {

        if (is_null($tekst)) {
            throw new \InvalidArgumentException('non-nullable tekst cannot be null');
        }

        $this->container['tekst'] = $tekst;

        return $this;
    }

    /**
     * Gets id_tabel
     *
     * @return int|null
     */
    public function getIdTabel()
    {
        return $this->container['id_tabel'];
    }

    /**
     * Sets id_tabel
     *
     * @param int|null $id_tabel id_tabel
     *
     * @return self
     */
    public function setIdTabel($id_tabel)
    {

        if (is_null($id_tabel)) {
            throw new \InvalidArgumentException('non-nullable id_tabel cannot be null');
        }

        $this->container['id_tabel'] = $id_tabel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


