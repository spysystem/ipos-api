<?php
/**
 * Product
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  iPosExchanger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * iPos integration for FileMaker 17 API
 *
 * OpenAPI description for the iPOS integration for FileMaker 17 API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: thomas@spysystem.dk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace iPosExchanger\Model;

use \ArrayAccess;
use \iPosExchanger\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  iPosExchanger
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Product implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * Return an object with the Model Fields
      *
      * @return ProductModelFields
      */
    public static function GetModelFields(): ProductModelFields
    {
        return new ProductModelFields();
    }

    /**
      * Return an object with the Model Attributes
      *
      * @return ProductModelAttributes
      */
    public static function GetModelAttributes(): ProductModelAttributes
    {
        return new ProductModelAttributes();
    }

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'ean_nr' => 'string',
        'varetekst' => 'string',
        'vare_beskrivelse' => 'string',
        'varenr_leverandr' => 'string',
        'salgspris' => 'string',
        'salgspris_incl_moms' => 'string',
        'kostpris' => 'string',
        'kostpris_dkk' => 'string',
        'avance_i_kr' => 'string',
        'id_varegruppe' => 'string',
        'lager_status_nskes' => 'string',
        'color' => 'string',
        'size' => 'string',
        'moms_sats' => 'string',
        'saeson' => 'string',
        'producent_navn' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'ean_nr' => null,
        'varetekst' => null,
        'vare_beskrivelse' => null,
        'varenr_leverandr' => null,
        'salgspris' => null,
        'salgspris_incl_moms' => null,
        'kostpris' => null,
        'kostpris_dkk' => null,
        'avance_i_kr' => null,
        'id_varegruppe' => null,
        'lager_status_nskes' => null,
        'color' => null,
        'size' => null,
        'moms_sats' => null,
        'saeson' => null,
        'producent_navn' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'ean_nr' => false,
		'varetekst' => false,
		'vare_beskrivelse' => false,
		'varenr_leverandr' => false,
		'salgspris' => false,
		'salgspris_incl_moms' => false,
		'kostpris' => false,
		'kostpris_dkk' => false,
		'avance_i_kr' => false,
		'id_varegruppe' => false,
		'lager_status_nskes' => false,
		'color' => false,
		'size' => false,
		'moms_sats' => false,
		'saeson' => false,
		'producent_navn' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'ID',
        'ean_nr' => 'EAN nr',
        'varetekst' => 'Varetekst',
        'vare_beskrivelse' => 'VareBeskrivelse',
        'varenr_leverandr' => 'Varenr_Leverandør',
        'salgspris' => 'Salgspris',
        'salgspris_incl_moms' => 'Salgspris Incl moms',
        'kostpris' => 'Kostpris',
        'kostpris_dkk' => 'kostpris_DKK',
        'avance_i_kr' => 'Avance i Kr',
        'id_varegruppe' => 'ID_varegruppe',
        'lager_status_nskes' => 'Lager Status ønskes',
        'color' => 'Color',
        'size' => 'Size',
        'moms_sats' => 'Moms_sats',
        'saeson' => 'Saeson',
        'producent_navn' => 'Producent_navn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ean_nr' => 'setEanNr',
        'varetekst' => 'setVaretekst',
        'vare_beskrivelse' => 'setVareBeskrivelse',
        'varenr_leverandr' => 'setVarenrLeverandr',
        'salgspris' => 'setSalgspris',
        'salgspris_incl_moms' => 'setSalgsprisInclMoms',
        'kostpris' => 'setKostpris',
        'kostpris_dkk' => 'setKostprisDkk',
        'avance_i_kr' => 'setAvanceIKr',
        'id_varegruppe' => 'setIdVaregruppe',
        'lager_status_nskes' => 'setLagerStatusNskes',
        'color' => 'setColor',
        'size' => 'setSize',
        'moms_sats' => 'setMomsSats',
        'saeson' => 'setSaeson',
        'producent_navn' => 'setProducentNavn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ean_nr' => 'getEanNr',
        'varetekst' => 'getVaretekst',
        'vare_beskrivelse' => 'getVareBeskrivelse',
        'varenr_leverandr' => 'getVarenrLeverandr',
        'salgspris' => 'getSalgspris',
        'salgspris_incl_moms' => 'getSalgsprisInclMoms',
        'kostpris' => 'getKostpris',
        'kostpris_dkk' => 'getKostprisDkk',
        'avance_i_kr' => 'getAvanceIKr',
        'id_varegruppe' => 'getIdVaregruppe',
        'lager_status_nskes' => 'getLagerStatusNskes',
        'color' => 'getColor',
        'size' => 'getSize',
        'moms_sats' => 'getMomsSats',
        'saeson' => 'getSaeson',
        'producent_navn' => 'getProducentNavn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ean_nr', $data ?? [], null);
        $this->setIfExists('varetekst', $data ?? [], null);
        $this->setIfExists('vare_beskrivelse', $data ?? [], null);
        $this->setIfExists('varenr_leverandr', $data ?? [], null);
        $this->setIfExists('salgspris', $data ?? [], null);
        $this->setIfExists('salgspris_incl_moms', $data ?? [], null);
        $this->setIfExists('kostpris', $data ?? [], null);
        $this->setIfExists('kostpris_dkk', $data ?? [], null);
        $this->setIfExists('avance_i_kr', $data ?? [], null);
        $this->setIfExists('id_varegruppe', $data ?? [], null);
        $this->setIfExists('lager_status_nskes', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('moms_sats', $data ?? [], null);
        $this->setIfExists('saeson', $data ?? [], null);
        $this->setIfExists('producent_navn', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID (= EAN)
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ean_nr
     *
     * @return string|null
     */
    public function getEanNr()
    {
        return $this->container['ean_nr'];
    }

    /**
     * Sets ean_nr
     *
     * @param string|null $ean_nr EAN code
     *
     * @return self
     */
    public function setEanNr($ean_nr)
    {
        if (is_null($ean_nr)) {
            throw new \InvalidArgumentException('non-nullable ean_nr cannot be null');
        }
        $this->container['ean_nr'] = $ean_nr;

        return $this;
    }

    /**
     * Gets varetekst
     *
     * @return string|null
     */
    public function getVaretekst()
    {
        return $this->container['varetekst'];
    }

    /**
     * Sets varetekst
     *
     * @param string|null $varetekst Style Name  + Color + Size (+Assortment)
     *
     * @return self
     */
    public function setVaretekst($varetekst)
    {
        if (is_null($varetekst)) {
            throw new \InvalidArgumentException('non-nullable varetekst cannot be null');
        }
        $this->container['varetekst'] = $varetekst;

        return $this;
    }

    /**
     * Gets vare_beskrivelse
     *
     * @return string|null
     */
    public function getVareBeskrivelse()
    {
        return $this->container['vare_beskrivelse'];
    }

    /**
     * Sets vare_beskrivelse
     *
     * @param string|null $vare_beskrivelse Type + Category + Quality + Weight + Country
     *
     * @return self
     */
    public function setVareBeskrivelse($vare_beskrivelse)
    {
        if (is_null($vare_beskrivelse)) {
            throw new \InvalidArgumentException('non-nullable vare_beskrivelse cannot be null');
        }
        $this->container['vare_beskrivelse'] = $vare_beskrivelse;

        return $this;
    }

    /**
     * Gets varenr_leverandr
     *
     * @return string|null
     */
    public function getVarenrLeverandr()
    {
        return $this->container['varenr_leverandr'];
    }

    /**
     * Sets varenr_leverandr
     *
     * @param string|null $varenr_leverandr Style No
     *
     * @return self
     */
    public function setVarenrLeverandr($varenr_leverandr)
    {
        if (is_null($varenr_leverandr)) {
            throw new \InvalidArgumentException('non-nullable varenr_leverandr cannot be null');
        }
        $this->container['varenr_leverandr'] = $varenr_leverandr;

        return $this;
    }

    /**
     * Gets salgspris
     *
     * @return string|null
     */
    public function getSalgspris()
    {
        return $this->container['salgspris'];
    }

    /**
     * Sets salgspris
     *
     * @param string|null $salgspris Sales Price
     *
     * @return self
     */
    public function setSalgspris($salgspris)
    {
        if (is_null($salgspris)) {
            throw new \InvalidArgumentException('non-nullable salgspris cannot be null');
        }
        $this->container['salgspris'] = $salgspris;

        return $this;
    }

    /**
     * Gets salgspris_incl_moms
     *
     * @return string|null
     */
    public function getSalgsprisInclMoms()
    {
        return $this->container['salgspris_incl_moms'];
    }

    /**
     * Sets salgspris_incl_moms
     *
     * @param string|null $salgspris_incl_moms Sales price including taxes
     *
     * @return self
     */
    public function setSalgsprisInclMoms($salgspris_incl_moms)
    {
        if (is_null($salgspris_incl_moms)) {
            throw new \InvalidArgumentException('non-nullable salgspris_incl_moms cannot be null');
        }
        $this->container['salgspris_incl_moms'] = $salgspris_incl_moms;

        return $this;
    }

    /**
     * Gets kostpris
     *
     * @return string|null
     */
    public function getKostpris()
    {
        return $this->container['kostpris'];
    }

    /**
     * Sets kostpris
     *
     * @param string|null $kostpris Engross Price customer currency
     *
     * @return self
     */
    public function setKostpris($kostpris)
    {
        if (is_null($kostpris)) {
            throw new \InvalidArgumentException('non-nullable kostpris cannot be null');
        }
        $this->container['kostpris'] = $kostpris;

        return $this;
    }

    /**
     * Gets kostpris_dkk
     *
     * @return string|null
     */
    public function getKostprisDkk()
    {
        return $this->container['kostpris_dkk'];
    }

    /**
     * Sets kostpris_dkk
     *
     * @param string|null $kostpris_dkk Engross Price DKK
     *
     * @return self
     */
    public function setKostprisDkk($kostpris_dkk)
    {
        if (is_null($kostpris_dkk)) {
            throw new \InvalidArgumentException('non-nullable kostpris_dkk cannot be null');
        }
        $this->container['kostpris_dkk'] = $kostpris_dkk;

        return $this;
    }

    /**
     * Gets avance_i_kr
     *
     * @return string|null
     */
    public function getAvanceIKr()
    {
        return $this->container['avance_i_kr'];
    }

    /**
     * Sets avance_i_kr
     *
     * @param string|null $avance_i_kr round(sales price - cost price, 2)
     *
     * @return self
     */
    public function setAvanceIKr($avance_i_kr)
    {
        if (is_null($avance_i_kr)) {
            throw new \InvalidArgumentException('non-nullable avance_i_kr cannot be null');
        }
        $this->container['avance_i_kr'] = $avance_i_kr;

        return $this;
    }

    /**
     * Gets id_varegruppe
     *
     * @return string|null
     */
    public function getIdVaregruppe()
    {
        return $this->container['id_varegruppe'];
    }

    /**
     * Sets id_varegruppe
     *
     * @param string|null $id_varegruppe Spy Group ID
     *
     * @return self
     */
    public function setIdVaregruppe($id_varegruppe)
    {
        if (is_null($id_varegruppe)) {
            throw new \InvalidArgumentException('non-nullable id_varegruppe cannot be null');
        }
        $this->container['id_varegruppe'] = $id_varegruppe;

        return $this;
    }

    /**
     * Gets lager_status_nskes
     *
     * @return string|null
     */
    public function getLagerStatusNskes()
    {
        return $this->container['lager_status_nskes'];
    }

    /**
     * Sets lager_status_nskes
     *
     * @param string|null $lager_status_nskes Always set to 1
     *
     * @return self
     */
    public function setLagerStatusNskes($lager_status_nskes)
    {
        if (is_null($lager_status_nskes)) {
            throw new \InvalidArgumentException('non-nullable lager_status_nskes cannot be null');
        }
        $this->container['lager_status_nskes'] = $lager_status_nskes;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color Color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            throw new \InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size Size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets moms_sats
     *
     * @return string|null
     */
    public function getMomsSats()
    {
        return $this->container['moms_sats'];
    }

    /**
     * Sets moms_sats
     *
     * @param string|null $moms_sats VAT
     *
     * @return self
     */
    public function setMomsSats($moms_sats)
    {
        if (is_null($moms_sats)) {
            throw new \InvalidArgumentException('non-nullable moms_sats cannot be null');
        }
        $this->container['moms_sats'] = $moms_sats;

        return $this;
    }

    /**
     * Gets saeson
     *
     * @return string|null
     */
    public function getSaeson()
    {
        return $this->container['saeson'];
    }

    /**
     * Sets saeson
     *
     * @param string|null $saeson Season
     *
     * @return self
     */
    public function setSaeson($saeson)
    {
        if (is_null($saeson)) {
            throw new \InvalidArgumentException('non-nullable saeson cannot be null');
        }
        $this->container['saeson'] = $saeson;

        return $this;
    }

    /**
     * Gets producent_navn
     *
     * @return string|null
     */
    public function getProducentNavn()
    {
        return $this->container['producent_navn'];
    }

    /**
     * Sets producent_navn
     *
     * @param string|null $producent_navn Brand
     *
     * @return self
     */
    public function setProducentNavn($producent_navn)
    {
        if (is_null($producent_navn)) {
            throw new \InvalidArgumentException('non-nullable producent_navn cannot be null');
        }
        $this->container['producent_navn'] = $producent_navn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return (string)json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


